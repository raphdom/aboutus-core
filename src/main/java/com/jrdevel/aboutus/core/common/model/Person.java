package com.jrdevel.aboutus.core.common.model;

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.jrdevel.aboutus.core.common.model.lists.CivilStatus;
import com.jrdevel.aboutus.core.common.model.lists.Country;
import com.jrdevel.aboutus.core.common.model.lists.MemberType;

/**
 * Person generated by hbm2java
 */
@Entity
@Table(name = "tbl_person")
public class Person implements java.io.Serializable {

	private Integer id;
	private MemberType memberType;
	private Church church;
	private Customer customer;
	private Country country;
	private CivilStatus civilStatus;
	private String name;
	private boolean member;
	private int nif;
	private Date birthday;
	private Date baptismdate;
	private String profession;
	private boolean consolidated;
	private int state;
	private boolean male;
	private boolean baptized;
	private Date arrivalChurchDate;
	private String precedingChurch;
	private String observations;
	private Set<EventPeople> eventPeoples = new HashSet<EventPeople>(0);
	private Set<MemberFunction> memberFunctions = new HashSet<MemberFunction>(0);
	private Set<PersonContacts> personContactses = new HashSet<PersonContacts>(
			0);
	private Set<Address> addresses = new HashSet<Address>(0);
	private Set<User> users = new HashSet<User>(0);

	public Person() {
	}

	public Person(Church church, Customer customer, String name,
			boolean member, int nif, boolean consolidated, int state,
			boolean male, boolean baptized) {
		this.church = church;
		this.customer = customer;
		this.name = name;
		this.member = member;
		this.nif = nif;
		this.consolidated = consolidated;
		this.state = state;
		this.male = male;
		this.baptized = baptized;
	}

	public Person(MemberType memberType, Church church, Customer customer,
			Country country, CivilStatus civilStatus, String name,
			boolean member, int nif, Date birthday, Date baptismdate,
			String profession, boolean consolidated, int state, boolean male,
			boolean baptized, Date arrivalChurchDate, String precedingChurch,
			String observations, Set<EventPeople> eventPeoples,
			Set<MemberFunction> memberFunctions,
			Set<PersonContacts> personContactses, Set<Address> addresses,
			Set<User> users) {
		this.memberType = memberType;
		this.church = church;
		this.customer = customer;
		this.country = country;
		this.civilStatus = civilStatus;
		this.name = name;
		this.member = member;
		this.nif = nif;
		this.birthday = birthday;
		this.baptismdate = baptismdate;
		this.profession = profession;
		this.consolidated = consolidated;
		this.state = state;
		this.male = male;
		this.baptized = baptized;
		this.arrivalChurchDate = arrivalChurchDate;
		this.precedingChurch = precedingChurch;
		this.observations = observations;
		this.eventPeoples = eventPeoples;
		this.memberFunctions = memberFunctions;
		this.personContactses = personContactses;
		this.addresses = addresses;
		this.users = users;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "memberType")
	public MemberType getMemberType() {
		return this.memberType;
	}

	public void setMemberType(MemberType memberType) {
		this.memberType = memberType;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "churchId", nullable = false)
	public Church getChurch() {
		return this.church;
	}

	public void setChurch(Church church) {
		this.church = church;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "customerId", nullable = false)
	public Customer getCustomer() {
		return this.customer;
	}

	public void setCustomer(Customer customer) {
		this.customer = customer;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "nacionality")
	public Country getCountry() {
		return this.country;
	}

	public void setCountry(Country country) {
		this.country = country;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "civilStatus")
	public CivilStatus getCivilStatus() {
		return this.civilStatus;
	}

	public void setCivilStatus(CivilStatus civilStatus) {
		this.civilStatus = civilStatus;
	}

	@Column(name = "name", nullable = false)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "member", nullable = false)
	public boolean isMember() {
		return this.member;
	}

	public void setMember(boolean member) {
		this.member = member;
	}

	@Column(name = "nif", nullable = false)
	public int getNif() {
		return this.nif;
	}

	public void setNif(int nif) {
		this.nif = nif;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "birthday", length = 19)
	public Date getBirthday() {
		return this.birthday;
	}

	public void setBirthday(Date birthday) {
		this.birthday = birthday;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "baptismdate", length = 19)
	public Date getBaptismdate() {
		return this.baptismdate;
	}

	public void setBaptismdate(Date baptismdate) {
		this.baptismdate = baptismdate;
	}

	@Column(name = "profession")
	public String getProfession() {
		return this.profession;
	}

	public void setProfession(String profession) {
		this.profession = profession;
	}

	@Column(name = "consolidated", nullable = false)
	public boolean isConsolidated() {
		return this.consolidated;
	}

	public void setConsolidated(boolean consolidated) {
		this.consolidated = consolidated;
	}

	@Column(name = "state", nullable = false)
	public int getState() {
		return this.state;
	}

	public void setState(int state) {
		this.state = state;
	}

	@Column(name = "male", nullable = false)
	public boolean isMale() {
		return this.male;
	}

	public void setMale(boolean male) {
		this.male = male;
	}

	@Column(name = "baptized", nullable = false)
	public boolean isBaptized() {
		return this.baptized;
	}

	public void setBaptized(boolean baptized) {
		this.baptized = baptized;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "arrivalChurchDate", length = 19)
	public Date getArrivalChurchDate() {
		return this.arrivalChurchDate;
	}

	public void setArrivalChurchDate(Date arrivalChurchDate) {
		this.arrivalChurchDate = arrivalChurchDate;
	}

	@Column(name = "precedingChurch")
	public String getPrecedingChurch() {
		return this.precedingChurch;
	}

	public void setPrecedingChurch(String precedingChurch) {
		this.precedingChurch = precedingChurch;
	}

	@Column(name = "observations", length = 65535)
	public String getObservations() {
		return this.observations;
	}

	public void setObservations(String observations) {
		this.observations = observations;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
	public Set<EventPeople> getEventPeoples() {
		return this.eventPeoples;
	}

	public void setEventPeoples(Set<EventPeople> eventPeoples) {
		this.eventPeoples = eventPeoples;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
	public Set<MemberFunction> getMemberFunctions() {
		return this.memberFunctions;
	}

	public void setMemberFunctions(Set<MemberFunction> memberFunctions) {
		this.memberFunctions = memberFunctions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "person", cascade = CascadeType.ALL)
	public Set<PersonContacts> getPersonContactses() {
		return this.personContactses;
	}

	public void setPersonContactses(Set<PersonContacts> personContactses) {
		this.personContactses = personContactses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "person", cascade = CascadeType.ALL)
	public Set<Address> getAddresses() {
		return this.addresses;
	}

	public void setAddresses(Set<Address> addresses) {
		this.addresses = addresses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
	public Set<User> getUsers() {
		return this.users;
	}

	public void setUsers(Set<User> users) {
		this.users = users;
	}

}
